
PressureMetr0.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080013ac  080013ac  000113ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080013d4  080013d4  000113d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080013d8  080013d8  000113d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  080013dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000c8  20000010  080013e8  00020010  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200000d8  080013e8  000200d8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009f06  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a3d  00000000  00000000  00029f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000057df  00000000  00000000  0002b978  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000738  00000000  00000000  00031158  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c30  00000000  00000000  00031890  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004ce7  00000000  00000000  000324c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002850  00000000  00000000  000371a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000399f7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000014b0  00000000  00000000  00039a74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001394 	.word	0x08001394

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001394 	.word	0x08001394

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f88e 	bl	8000284 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f842 	bl	8000200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000008 	.word	0x20000008
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f81b 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f000 ff70 	bl	8001090 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	2000002c 	.word	0x2000002c

080001dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001de:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001ea:	041b      	lsls	r3, r3, #16
 80001ec:	0c1b      	lsrs	r3, r3, #16
 80001ee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f8:	60d3      	str	r3, [r2, #12]
 80001fa:	4770      	bx	lr
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000202:	b530      	push	{r4, r5, lr}
 8000204:	68dc      	ldr	r4, [r3, #12]
 8000206:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000210:	2b04      	cmp	r3, #4
 8000212:	bf28      	it	cs
 8000214:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000218:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021c:	bf98      	it	ls
 800021e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000220:	fa05 f303 	lsl.w	r3, r5, r3
 8000224:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000228:	bf88      	it	hi
 800022a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800022c:	4019      	ands	r1, r3
 800022e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000230:	fa05 f404 	lsl.w	r4, r5, r4
 8000234:	3c01      	subs	r4, #1
 8000236:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000238:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023a:	ea42 0201 	orr.w	r2, r2, r1
 800023e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000242:	bfa9      	itett	ge
 8000244:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	4b06      	ldrlt	r3, [pc, #24]	; (8000264 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	b2d2      	uxtbge	r2, r2
 800024c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	bfbb      	ittet	lt
 8000252:	f000 000f 	andlt.w	r0, r0, #15
 8000256:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025c:	541a      	strblt	r2, [r3, r0]
 800025e:	bd30      	pop	{r4, r5, pc}
 8000260:	e000ed00 	.word	0xe000ed00
 8000264:	e000ed14 	.word	0xe000ed14

08000268 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000268:	2800      	cmp	r0, #0
 800026a:	db08      	blt.n	800027e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800026c:	2301      	movs	r3, #1
 800026e:	0942      	lsrs	r2, r0, #5
 8000270:	f000 001f 	and.w	r0, r0, #31
 8000274:	fa03 f000 	lsl.w	r0, r3, r0
 8000278:	4b01      	ldr	r3, [pc, #4]	; (8000280 <HAL_NVIC_EnableIRQ+0x18>)
 800027a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800027e:	4770      	bx	lr
 8000280:	e000e100 	.word	0xe000e100

08000284 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000284:	3801      	subs	r0, #1
 8000286:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800028a:	d20a      	bcs.n	80002a2 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028e:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000292:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800029c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002a2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e010 	.word	0xe000e010
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002b0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80002b4:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002b6:	2b02      	cmp	r3, #2
 80002b8:	d003      	beq.n	80002c2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80002ba:	2304      	movs	r3, #4
 80002bc:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80002be:	2001      	movs	r0, #1
 80002c0:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80002c2:	6803      	ldr	r3, [r0, #0]
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	f022 020e 	bic.w	r2, r2, #14
 80002ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	f022 0201 	bic.w	r2, r2, #1
 80002d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80002d4:	4a18      	ldr	r2, [pc, #96]	; (8000338 <HAL_DMA_Abort_IT+0x88>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d01f      	beq.n	800031a <HAL_DMA_Abort_IT+0x6a>
 80002da:	3214      	adds	r2, #20
 80002dc:	4293      	cmp	r3, r2
 80002de:	d01e      	beq.n	800031e <HAL_DMA_Abort_IT+0x6e>
 80002e0:	3214      	adds	r2, #20
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d01d      	beq.n	8000322 <HAL_DMA_Abort_IT+0x72>
 80002e6:	3214      	adds	r2, #20
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d01d      	beq.n	8000328 <HAL_DMA_Abort_IT+0x78>
 80002ec:	3214      	adds	r2, #20
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d01d      	beq.n	800032e <HAL_DMA_Abort_IT+0x7e>
 80002f2:	3214      	adds	r2, #20
 80002f4:	4293      	cmp	r3, r2
 80002f6:	bf0c      	ite	eq
 80002f8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80002fc:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000300:	4a0e      	ldr	r2, [pc, #56]	; (800033c <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000302:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000304:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000306:	2301      	movs	r3, #1
 8000308:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800030c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800030e:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000312:	b17b      	cbz	r3, 8000334 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000314:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000316:	4620      	mov	r0, r4
 8000318:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800031a:	2301      	movs	r3, #1
 800031c:	e7f0      	b.n	8000300 <HAL_DMA_Abort_IT+0x50>
 800031e:	2310      	movs	r3, #16
 8000320:	e7ee      	b.n	8000300 <HAL_DMA_Abort_IT+0x50>
 8000322:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000326:	e7eb      	b.n	8000300 <HAL_DMA_Abort_IT+0x50>
 8000328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800032c:	e7e8      	b.n	8000300 <HAL_DMA_Abort_IT+0x50>
 800032e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000332:	e7e5      	b.n	8000300 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000334:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000336:	bd10      	pop	{r4, pc}
 8000338:	40020008 	.word	0x40020008
 800033c:	40020000 	.word	0x40020000

08000340 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000344:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000346:	4626      	mov	r6, r4
 8000348:	4b66      	ldr	r3, [pc, #408]	; (80004e4 <HAL_GPIO_Init+0x1a4>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800034a:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 80004f4 <HAL_GPIO_Init+0x1b4>
 800034e:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 80004f8 <HAL_GPIO_Init+0x1b8>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000352:	680a      	ldr	r2, [r1, #0]
 8000354:	fa32 f506 	lsrs.w	r5, r2, r6
 8000358:	d102      	bne.n	8000360 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 800035a:	b003      	add	sp, #12
 800035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000360:	f04f 0801 	mov.w	r8, #1
 8000364:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000368:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 800036c:	4590      	cmp	r8, r2
 800036e:	d17f      	bne.n	8000470 <HAL_GPIO_Init+0x130>
      switch (GPIO_Init->Mode)
 8000370:	684d      	ldr	r5, [r1, #4]
 8000372:	2d12      	cmp	r5, #18
 8000374:	f000 80aa 	beq.w	80004cc <HAL_GPIO_Init+0x18c>
 8000378:	f200 8083 	bhi.w	8000482 <HAL_GPIO_Init+0x142>
 800037c:	2d02      	cmp	r5, #2
 800037e:	f000 80a2 	beq.w	80004c6 <HAL_GPIO_Init+0x186>
 8000382:	d877      	bhi.n	8000474 <HAL_GPIO_Init+0x134>
 8000384:	2d00      	cmp	r5, #0
 8000386:	f000 8089 	beq.w	800049c <HAL_GPIO_Init+0x15c>
 800038a:	2d01      	cmp	r5, #1
 800038c:	f000 8099 	beq.w	80004c2 <HAL_GPIO_Init+0x182>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000390:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000394:	2aff      	cmp	r2, #255	; 0xff
 8000396:	bf93      	iteet	ls
 8000398:	4682      	movls	sl, r0
 800039a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800039e:	3d08      	subhi	r5, #8
 80003a0:	f8d0 b000 	ldrls.w	fp, [r0]
 80003a4:	bf92      	itee	ls
 80003a6:	00b5      	lslls	r5, r6, #2
 80003a8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80003ac:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003ae:	fa09 f805 	lsl.w	r8, r9, r5
 80003b2:	ea2b 0808 	bic.w	r8, fp, r8
 80003b6:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003ba:	bf88      	it	hi
 80003bc:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003c0:	ea48 0505 	orr.w	r5, r8, r5
 80003c4:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003c8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80003cc:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80003d0:	d04e      	beq.n	8000470 <HAL_GPIO_Init+0x130>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003d2:	4d45      	ldr	r5, [pc, #276]	; (80004e8 <HAL_GPIO_Init+0x1a8>)
 80003d4:	4f44      	ldr	r7, [pc, #272]	; (80004e8 <HAL_GPIO_Init+0x1a8>)
 80003d6:	69ad      	ldr	r5, [r5, #24]
 80003d8:	f026 0803 	bic.w	r8, r6, #3
 80003dc:	f045 0501 	orr.w	r5, r5, #1
 80003e0:	61bd      	str	r5, [r7, #24]
 80003e2:	69bd      	ldr	r5, [r7, #24]
 80003e4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80003e8:	f005 0501 	and.w	r5, r5, #1
 80003ec:	9501      	str	r5, [sp, #4]
 80003ee:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80003f2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003f6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80003f8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80003fc:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000400:	fa09 f90b 	lsl.w	r9, r9, fp
 8000404:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000408:	4d38      	ldr	r5, [pc, #224]	; (80004ec <HAL_GPIO_Init+0x1ac>)
 800040a:	42a8      	cmp	r0, r5
 800040c:	d063      	beq.n	80004d6 <HAL_GPIO_Init+0x196>
 800040e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000412:	42a8      	cmp	r0, r5
 8000414:	d061      	beq.n	80004da <HAL_GPIO_Init+0x19a>
 8000416:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800041a:	42a8      	cmp	r0, r5
 800041c:	d05f      	beq.n	80004de <HAL_GPIO_Init+0x19e>
 800041e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000422:	42a8      	cmp	r0, r5
 8000424:	bf0c      	ite	eq
 8000426:	2503      	moveq	r5, #3
 8000428:	2504      	movne	r5, #4
 800042a:	fa05 f50b 	lsl.w	r5, r5, fp
 800042e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000432:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000436:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000438:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800043c:	bf14      	ite	ne
 800043e:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000440:	4395      	biceq	r5, r2
 8000442:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000444:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000446:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800044a:	bf14      	ite	ne
 800044c:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800044e:	4395      	biceq	r5, r2
 8000450:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000452:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000454:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000458:	bf14      	ite	ne
 800045a:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800045c:	4395      	biceq	r5, r2
 800045e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000460:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000462:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000466:	bf14      	ite	ne
 8000468:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800046a:	ea25 0202 	biceq.w	r2, r5, r2
 800046e:	60da      	str	r2, [r3, #12]
	position++;
 8000470:	3601      	adds	r6, #1
 8000472:	e76e      	b.n	8000352 <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000474:	2d03      	cmp	r5, #3
 8000476:	d022      	beq.n	80004be <HAL_GPIO_Init+0x17e>
 8000478:	2d11      	cmp	r5, #17
 800047a:	d189      	bne.n	8000390 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800047c:	68cc      	ldr	r4, [r1, #12]
 800047e:	3404      	adds	r4, #4
          break;
 8000480:	e786      	b.n	8000390 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8000482:	4f1b      	ldr	r7, [pc, #108]	; (80004f0 <HAL_GPIO_Init+0x1b0>)
 8000484:	42bd      	cmp	r5, r7
 8000486:	d009      	beq.n	800049c <HAL_GPIO_Init+0x15c>
 8000488:	d812      	bhi.n	80004b0 <HAL_GPIO_Init+0x170>
 800048a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80004fc <HAL_GPIO_Init+0x1bc>
 800048e:	454d      	cmp	r5, r9
 8000490:	d004      	beq.n	800049c <HAL_GPIO_Init+0x15c>
 8000492:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000496:	454d      	cmp	r5, r9
 8000498:	f47f af7a 	bne.w	8000390 <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800049c:	688c      	ldr	r4, [r1, #8]
 800049e:	b1c4      	cbz	r4, 80004d2 <HAL_GPIO_Init+0x192>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004a0:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 80004a2:	bf0c      	ite	eq
 80004a4:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80004a8:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004ac:	2408      	movs	r4, #8
 80004ae:	e76f      	b.n	8000390 <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 80004b0:	4575      	cmp	r5, lr
 80004b2:	d0f3      	beq.n	800049c <HAL_GPIO_Init+0x15c>
 80004b4:	4565      	cmp	r5, ip
 80004b6:	d0f1      	beq.n	800049c <HAL_GPIO_Init+0x15c>
 80004b8:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000500 <HAL_GPIO_Init+0x1c0>
 80004bc:	e7eb      	b.n	8000496 <HAL_GPIO_Init+0x156>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004be:	2400      	movs	r4, #0
 80004c0:	e766      	b.n	8000390 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004c2:	68cc      	ldr	r4, [r1, #12]
          break;
 80004c4:	e764      	b.n	8000390 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004c6:	68cc      	ldr	r4, [r1, #12]
 80004c8:	3408      	adds	r4, #8
          break;
 80004ca:	e761      	b.n	8000390 <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004cc:	68cc      	ldr	r4, [r1, #12]
 80004ce:	340c      	adds	r4, #12
          break;
 80004d0:	e75e      	b.n	8000390 <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004d2:	2404      	movs	r4, #4
 80004d4:	e75c      	b.n	8000390 <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80004d6:	2500      	movs	r5, #0
 80004d8:	e7a7      	b.n	800042a <HAL_GPIO_Init+0xea>
 80004da:	2501      	movs	r5, #1
 80004dc:	e7a5      	b.n	800042a <HAL_GPIO_Init+0xea>
 80004de:	2502      	movs	r5, #2
 80004e0:	e7a3      	b.n	800042a <HAL_GPIO_Init+0xea>
 80004e2:	bf00      	nop
 80004e4:	40010400 	.word	0x40010400
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010800 	.word	0x40010800
 80004f0:	10210000 	.word	0x10210000
 80004f4:	10310000 	.word	0x10310000
 80004f8:	10320000 	.word	0x10320000
 80004fc:	10110000 	.word	0x10110000
 8000500:	10220000 	.word	0x10220000

08000504 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000504:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000506:	4604      	mov	r4, r0
 8000508:	b908      	cbnz	r0, 800050e <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 800050a:	2001      	movs	r0, #1
 800050c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800050e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000512:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000516:	b91b      	cbnz	r3, 8000520 <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000518:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800051c:	f000 fdda 	bl	80010d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000520:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000522:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000524:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000528:	6813      	ldr	r3, [r2, #0]
 800052a:	f023 0301 	bic.w	r3, r3, #1
 800052e:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000530:	f000 fb04 	bl	8000b3c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000534:	6865      	ldr	r5, [r4, #4]
 8000536:	4b41      	ldr	r3, [pc, #260]	; (800063c <HAL_I2C_Init+0x138>)
 8000538:	429d      	cmp	r5, r3
 800053a:	d84d      	bhi.n	80005d8 <HAL_I2C_Init+0xd4>
 800053c:	4b40      	ldr	r3, [pc, #256]	; (8000640 <HAL_I2C_Init+0x13c>)
 800053e:	4298      	cmp	r0, r3
 8000540:	d9e3      	bls.n	800050a <HAL_I2C_Init+0x6>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000542:	4940      	ldr	r1, [pc, #256]	; (8000644 <HAL_I2C_Init+0x140>)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000544:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000546:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800054a:	6853      	ldr	r3, [r2, #4]
 800054c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000550:	430b      	orrs	r3, r1
 8000552:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000554:	6a13      	ldr	r3, [r2, #32]
 8000556:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800055a:	3101      	adds	r1, #1
 800055c:	4319      	orrs	r1, r3
 800055e:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000560:	69d1      	ldr	r1, [r2, #28]
 8000562:	4b36      	ldr	r3, [pc, #216]	; (800063c <HAL_I2C_Init+0x138>)
 8000564:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000568:	429d      	cmp	r5, r3
 800056a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800056e:	f100 30ff 	add.w	r0, r0, #4294967295
 8000572:	d848      	bhi.n	8000606 <HAL_I2C_Init+0x102>
 8000574:	006d      	lsls	r5, r5, #1
 8000576:	fbb0 f0f5 	udiv	r0, r0, r5
 800057a:	3001      	adds	r0, #1
 800057c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000580:	2b04      	cmp	r3, #4
 8000582:	bf38      	it	cc
 8000584:	2304      	movcc	r3, #4
 8000586:	430b      	orrs	r3, r1
 8000588:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800058a:	6811      	ldr	r1, [r2, #0]
 800058c:	6a20      	ldr	r0, [r4, #32]
 800058e:	69e3      	ldr	r3, [r4, #28]
 8000590:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000594:	4303      	orrs	r3, r0
 8000596:	430b      	orrs	r3, r1
 8000598:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800059a:	6891      	ldr	r1, [r2, #8]
 800059c:	68e0      	ldr	r0, [r4, #12]
 800059e:	6923      	ldr	r3, [r4, #16]
 80005a0:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80005a4:	4303      	orrs	r3, r0
 80005a6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80005aa:	430b      	orrs	r3, r1
 80005ac:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80005ae:	68d1      	ldr	r1, [r2, #12]
 80005b0:	69a0      	ldr	r0, [r4, #24]
 80005b2:	6963      	ldr	r3, [r4, #20]
 80005b4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80005b8:	4303      	orrs	r3, r0
 80005ba:	430b      	orrs	r3, r1
 80005bc:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80005be:	6813      	ldr	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80005c0:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80005c8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80005ca:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80005cc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80005d0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80005d2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 80005d6:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80005d8:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <HAL_I2C_Init+0x144>)
 80005da:	4298      	cmp	r0, r3
 80005dc:	d995      	bls.n	800050a <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80005de:	4e19      	ldr	r6, [pc, #100]	; (8000644 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80005e0:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80005e4:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80005e8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80005ea:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80005ec:	6853      	ldr	r3, [r2, #4]
 80005ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80005f2:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80005f4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80005f8:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80005fa:	6a13      	ldr	r3, [r2, #32]
 80005fc:	fbb1 f1f6 	udiv	r1, r1, r6
 8000600:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000604:	e7a9      	b.n	800055a <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000606:	68a3      	ldr	r3, [r4, #8]
 8000608:	b953      	cbnz	r3, 8000620 <HAL_I2C_Init+0x11c>
 800060a:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800060e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000612:	1c43      	adds	r3, r0, #1
 8000614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000618:	b16b      	cbz	r3, 8000636 <HAL_I2C_Init+0x132>
 800061a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800061e:	e7b2      	b.n	8000586 <HAL_I2C_Init+0x82>
 8000620:	2319      	movs	r3, #25
 8000622:	436b      	muls	r3, r5
 8000624:	fbb0 f0f3 	udiv	r0, r0, r3
 8000628:	1c43      	adds	r3, r0, #1
 800062a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800062e:	b113      	cbz	r3, 8000636 <HAL_I2C_Init+0x132>
 8000630:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000634:	e7a7      	b.n	8000586 <HAL_I2C_Init+0x82>
 8000636:	2301      	movs	r3, #1
 8000638:	e7a5      	b.n	8000586 <HAL_I2C_Init+0x82>
 800063a:	bf00      	nop
 800063c:	000186a0 	.word	0x000186a0
 8000640:	001e847f 	.word	0x001e847f
 8000644:	000f4240 	.word	0x000f4240
 8000648:	003d08ff 	.word	0x003d08ff

0800064c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800064c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000650:	4605      	mov	r5, r0
 8000652:	b908      	cbnz	r0, 8000658 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000654:	2001      	movs	r0, #1
 8000656:	e03c      	b.n	80006d2 <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000658:	6803      	ldr	r3, [r0, #0]
 800065a:	07db      	lsls	r3, r3, #31
 800065c:	d410      	bmi.n	8000680 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800065e:	682b      	ldr	r3, [r5, #0]
 8000660:	079f      	lsls	r7, r3, #30
 8000662:	d45d      	bmi.n	8000720 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000664:	682b      	ldr	r3, [r5, #0]
 8000666:	0719      	lsls	r1, r3, #28
 8000668:	f100 8094 	bmi.w	8000794 <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800066c:	682b      	ldr	r3, [r5, #0]
 800066e:	075a      	lsls	r2, r3, #29
 8000670:	f100 80be 	bmi.w	80007f0 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000674:	69e8      	ldr	r0, [r5, #28]
 8000676:	2800      	cmp	r0, #0
 8000678:	f040 812c 	bne.w	80008d4 <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 800067c:	2000      	movs	r0, #0
 800067e:	e028      	b.n	80006d2 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000680:	4c8f      	ldr	r4, [pc, #572]	; (80008c0 <HAL_RCC_OscConfig+0x274>)
 8000682:	6863      	ldr	r3, [r4, #4]
 8000684:	f003 030c 	and.w	r3, r3, #12
 8000688:	2b04      	cmp	r3, #4
 800068a:	d007      	beq.n	800069c <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800068c:	6863      	ldr	r3, [r4, #4]
 800068e:	f003 030c 	and.w	r3, r3, #12
 8000692:	2b08      	cmp	r3, #8
 8000694:	d109      	bne.n	80006aa <HAL_RCC_OscConfig+0x5e>
 8000696:	6863      	ldr	r3, [r4, #4]
 8000698:	03de      	lsls	r6, r3, #15
 800069a:	d506      	bpl.n	80006aa <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800069c:	6823      	ldr	r3, [r4, #0]
 800069e:	039c      	lsls	r4, r3, #14
 80006a0:	d5dd      	bpl.n	800065e <HAL_RCC_OscConfig+0x12>
 80006a2:	686b      	ldr	r3, [r5, #4]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d1da      	bne.n	800065e <HAL_RCC_OscConfig+0x12>
 80006a8:	e7d4      	b.n	8000654 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006aa:	686b      	ldr	r3, [r5, #4]
 80006ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006b0:	d112      	bne.n	80006d8 <HAL_RCC_OscConfig+0x8c>
 80006b2:	6823      	ldr	r3, [r4, #0]
 80006b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006b8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006ba:	f7ff fd89 	bl	80001d0 <HAL_GetTick>
 80006be:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006c0:	6823      	ldr	r3, [r4, #0]
 80006c2:	0398      	lsls	r0, r3, #14
 80006c4:	d4cb      	bmi.n	800065e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80006c6:	f7ff fd83 	bl	80001d0 <HAL_GetTick>
 80006ca:	1b80      	subs	r0, r0, r6
 80006cc:	2864      	cmp	r0, #100	; 0x64
 80006ce:	d9f7      	bls.n	80006c0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 80006d0:	2003      	movs	r0, #3
}
 80006d2:	b002      	add	sp, #8
 80006d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006d8:	b99b      	cbnz	r3, 8000702 <HAL_RCC_OscConfig+0xb6>
 80006da:	6823      	ldr	r3, [r4, #0]
 80006dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006e0:	6023      	str	r3, [r4, #0]
 80006e2:	6823      	ldr	r3, [r4, #0]
 80006e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006e8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006ea:	f7ff fd71 	bl	80001d0 <HAL_GetTick>
 80006ee:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	0399      	lsls	r1, r3, #14
 80006f4:	d5b3      	bpl.n	800065e <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80006f6:	f7ff fd6b 	bl	80001d0 <HAL_GetTick>
 80006fa:	1b80      	subs	r0, r0, r6
 80006fc:	2864      	cmp	r0, #100	; 0x64
 80006fe:	d9f7      	bls.n	80006f0 <HAL_RCC_OscConfig+0xa4>
 8000700:	e7e6      	b.n	80006d0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000702:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000706:	6823      	ldr	r3, [r4, #0]
 8000708:	d103      	bne.n	8000712 <HAL_RCC_OscConfig+0xc6>
 800070a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800070e:	6023      	str	r3, [r4, #0]
 8000710:	e7cf      	b.n	80006b2 <HAL_RCC_OscConfig+0x66>
 8000712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000716:	6023      	str	r3, [r4, #0]
 8000718:	6823      	ldr	r3, [r4, #0]
 800071a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800071e:	e7cb      	b.n	80006b8 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000720:	4c67      	ldr	r4, [pc, #412]	; (80008c0 <HAL_RCC_OscConfig+0x274>)
 8000722:	6863      	ldr	r3, [r4, #4]
 8000724:	f013 0f0c 	tst.w	r3, #12
 8000728:	d007      	beq.n	800073a <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800072a:	6863      	ldr	r3, [r4, #4]
 800072c:	f003 030c 	and.w	r3, r3, #12
 8000730:	2b08      	cmp	r3, #8
 8000732:	d110      	bne.n	8000756 <HAL_RCC_OscConfig+0x10a>
 8000734:	6863      	ldr	r3, [r4, #4]
 8000736:	03da      	lsls	r2, r3, #15
 8000738:	d40d      	bmi.n	8000756 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800073a:	6823      	ldr	r3, [r4, #0]
 800073c:	079b      	lsls	r3, r3, #30
 800073e:	d502      	bpl.n	8000746 <HAL_RCC_OscConfig+0xfa>
 8000740:	692b      	ldr	r3, [r5, #16]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d186      	bne.n	8000654 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000746:	6823      	ldr	r3, [r4, #0]
 8000748:	696a      	ldr	r2, [r5, #20]
 800074a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800074e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000752:	6023      	str	r3, [r4, #0]
 8000754:	e786      	b.n	8000664 <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000756:	692a      	ldr	r2, [r5, #16]
 8000758:	4b5a      	ldr	r3, [pc, #360]	; (80008c4 <HAL_RCC_OscConfig+0x278>)
 800075a:	b16a      	cbz	r2, 8000778 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 800075c:	2201      	movs	r2, #1
 800075e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000760:	f7ff fd36 	bl	80001d0 <HAL_GetTick>
 8000764:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000766:	6823      	ldr	r3, [r4, #0]
 8000768:	079f      	lsls	r7, r3, #30
 800076a:	d4ec      	bmi.n	8000746 <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800076c:	f7ff fd30 	bl	80001d0 <HAL_GetTick>
 8000770:	1b80      	subs	r0, r0, r6
 8000772:	2802      	cmp	r0, #2
 8000774:	d9f7      	bls.n	8000766 <HAL_RCC_OscConfig+0x11a>
 8000776:	e7ab      	b.n	80006d0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000778:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800077a:	f7ff fd29 	bl	80001d0 <HAL_GetTick>
 800077e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000780:	6823      	ldr	r3, [r4, #0]
 8000782:	0798      	lsls	r0, r3, #30
 8000784:	f57f af6e 	bpl.w	8000664 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000788:	f7ff fd22 	bl	80001d0 <HAL_GetTick>
 800078c:	1b80      	subs	r0, r0, r6
 800078e:	2802      	cmp	r0, #2
 8000790:	d9f6      	bls.n	8000780 <HAL_RCC_OscConfig+0x134>
 8000792:	e79d      	b.n	80006d0 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000794:	69aa      	ldr	r2, [r5, #24]
 8000796:	4c4a      	ldr	r4, [pc, #296]	; (80008c0 <HAL_RCC_OscConfig+0x274>)
 8000798:	4b4b      	ldr	r3, [pc, #300]	; (80008c8 <HAL_RCC_OscConfig+0x27c>)
 800079a:	b1da      	cbz	r2, 80007d4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800079c:	2201      	movs	r2, #1
 800079e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007a0:	f7ff fd16 	bl	80001d0 <HAL_GetTick>
 80007a4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007a8:	079b      	lsls	r3, r3, #30
 80007aa:	d50d      	bpl.n	80007c8 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80007ac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80007b0:	4b46      	ldr	r3, [pc, #280]	; (80008cc <HAL_RCC_OscConfig+0x280>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80007b8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80007ba:	bf00      	nop
  }
  while (Delay --);
 80007bc:	9b01      	ldr	r3, [sp, #4]
 80007be:	1e5a      	subs	r2, r3, #1
 80007c0:	9201      	str	r2, [sp, #4]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d1f9      	bne.n	80007ba <HAL_RCC_OscConfig+0x16e>
 80007c6:	e751      	b.n	800066c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80007c8:	f7ff fd02 	bl	80001d0 <HAL_GetTick>
 80007cc:	1b80      	subs	r0, r0, r6
 80007ce:	2802      	cmp	r0, #2
 80007d0:	d9e9      	bls.n	80007a6 <HAL_RCC_OscConfig+0x15a>
 80007d2:	e77d      	b.n	80006d0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 80007d4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80007d6:	f7ff fcfb 	bl	80001d0 <HAL_GetTick>
 80007da:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007de:	079f      	lsls	r7, r3, #30
 80007e0:	f57f af44 	bpl.w	800066c <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80007e4:	f7ff fcf4 	bl	80001d0 <HAL_GetTick>
 80007e8:	1b80      	subs	r0, r0, r6
 80007ea:	2802      	cmp	r0, #2
 80007ec:	d9f6      	bls.n	80007dc <HAL_RCC_OscConfig+0x190>
 80007ee:	e76f      	b.n	80006d0 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007f0:	4c33      	ldr	r4, [pc, #204]	; (80008c0 <HAL_RCC_OscConfig+0x274>)
 80007f2:	69e3      	ldr	r3, [r4, #28]
 80007f4:	00d8      	lsls	r0, r3, #3
 80007f6:	d424      	bmi.n	8000842 <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 80007f8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	69e3      	ldr	r3, [r4, #28]
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	61e3      	str	r3, [r4, #28]
 8000802:	69e3      	ldr	r3, [r4, #28]
 8000804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800080c:	4e30      	ldr	r6, [pc, #192]	; (80008d0 <HAL_RCC_OscConfig+0x284>)
 800080e:	6833      	ldr	r3, [r6, #0]
 8000810:	05d9      	lsls	r1, r3, #23
 8000812:	d518      	bpl.n	8000846 <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000814:	68eb      	ldr	r3, [r5, #12]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d126      	bne.n	8000868 <HAL_RCC_OscConfig+0x21c>
 800081a:	6a23      	ldr	r3, [r4, #32]
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000822:	f7ff fcd5 	bl	80001d0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000826:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800082a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800082c:	6a23      	ldr	r3, [r4, #32]
 800082e:	079b      	lsls	r3, r3, #30
 8000830:	d53f      	bpl.n	80008b2 <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8000832:	2f00      	cmp	r7, #0
 8000834:	f43f af1e 	beq.w	8000674 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000838:	69e3      	ldr	r3, [r4, #28]
 800083a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800083e:	61e3      	str	r3, [r4, #28]
 8000840:	e718      	b.n	8000674 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000842:	2700      	movs	r7, #0
 8000844:	e7e2      	b.n	800080c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000846:	6833      	ldr	r3, [r6, #0]
 8000848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800084c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800084e:	f7ff fcbf 	bl	80001d0 <HAL_GetTick>
 8000852:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000854:	6833      	ldr	r3, [r6, #0]
 8000856:	05da      	lsls	r2, r3, #23
 8000858:	d4dc      	bmi.n	8000814 <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800085a:	f7ff fcb9 	bl	80001d0 <HAL_GetTick>
 800085e:	eba0 0008 	sub.w	r0, r0, r8
 8000862:	2864      	cmp	r0, #100	; 0x64
 8000864:	d9f6      	bls.n	8000854 <HAL_RCC_OscConfig+0x208>
 8000866:	e733      	b.n	80006d0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000868:	b9ab      	cbnz	r3, 8000896 <HAL_RCC_OscConfig+0x24a>
 800086a:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800086c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000870:	f023 0301 	bic.w	r3, r3, #1
 8000874:	6223      	str	r3, [r4, #32]
 8000876:	6a23      	ldr	r3, [r4, #32]
 8000878:	f023 0304 	bic.w	r3, r3, #4
 800087c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800087e:	f7ff fca7 	bl	80001d0 <HAL_GetTick>
 8000882:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000884:	6a23      	ldr	r3, [r4, #32]
 8000886:	0798      	lsls	r0, r3, #30
 8000888:	d5d3      	bpl.n	8000832 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800088a:	f7ff fca1 	bl	80001d0 <HAL_GetTick>
 800088e:	1b80      	subs	r0, r0, r6
 8000890:	4540      	cmp	r0, r8
 8000892:	d9f7      	bls.n	8000884 <HAL_RCC_OscConfig+0x238>
 8000894:	e71c      	b.n	80006d0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000896:	2b05      	cmp	r3, #5
 8000898:	6a23      	ldr	r3, [r4, #32]
 800089a:	d103      	bne.n	80008a4 <HAL_RCC_OscConfig+0x258>
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6223      	str	r3, [r4, #32]
 80008a2:	e7ba      	b.n	800081a <HAL_RCC_OscConfig+0x1ce>
 80008a4:	f023 0301 	bic.w	r3, r3, #1
 80008a8:	6223      	str	r3, [r4, #32]
 80008aa:	6a23      	ldr	r3, [r4, #32]
 80008ac:	f023 0304 	bic.w	r3, r3, #4
 80008b0:	e7b6      	b.n	8000820 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80008b2:	f7ff fc8d 	bl	80001d0 <HAL_GetTick>
 80008b6:	eba0 0008 	sub.w	r0, r0, r8
 80008ba:	42b0      	cmp	r0, r6
 80008bc:	d9b6      	bls.n	800082c <HAL_RCC_OscConfig+0x1e0>
 80008be:	e707      	b.n	80006d0 <HAL_RCC_OscConfig+0x84>
 80008c0:	40021000 	.word	0x40021000
 80008c4:	42420000 	.word	0x42420000
 80008c8:	42420480 	.word	0x42420480
 80008cc:	20000008 	.word	0x20000008
 80008d0:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008d4:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <HAL_RCC_OscConfig+0x334>)
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	461c      	mov	r4, r3
 80008da:	f002 020c 	and.w	r2, r2, #12
 80008de:	2a08      	cmp	r2, #8
 80008e0:	d03d      	beq.n	800095e <HAL_RCC_OscConfig+0x312>
 80008e2:	2300      	movs	r3, #0
 80008e4:	4e27      	ldr	r6, [pc, #156]	; (8000984 <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008e6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80008e8:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008ea:	d12b      	bne.n	8000944 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80008ec:	f7ff fc70 	bl	80001d0 <HAL_GetTick>
 80008f0:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008f2:	6823      	ldr	r3, [r4, #0]
 80008f4:	0199      	lsls	r1, r3, #6
 80008f6:	d41f      	bmi.n	8000938 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80008f8:	6a2b      	ldr	r3, [r5, #32]
 80008fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008fe:	d105      	bne.n	800090c <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000900:	6862      	ldr	r2, [r4, #4]
 8000902:	68a9      	ldr	r1, [r5, #8]
 8000904:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000908:	430a      	orrs	r2, r1
 800090a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800090c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800090e:	6862      	ldr	r2, [r4, #4]
 8000910:	430b      	orrs	r3, r1
 8000912:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000916:	4313      	orrs	r3, r2
 8000918:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800091a:	2301      	movs	r3, #1
 800091c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800091e:	f7ff fc57 	bl	80001d0 <HAL_GetTick>
 8000922:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000924:	6823      	ldr	r3, [r4, #0]
 8000926:	019a      	lsls	r2, r3, #6
 8000928:	f53f aea8 	bmi.w	800067c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800092c:	f7ff fc50 	bl	80001d0 <HAL_GetTick>
 8000930:	1b40      	subs	r0, r0, r5
 8000932:	2802      	cmp	r0, #2
 8000934:	d9f6      	bls.n	8000924 <HAL_RCC_OscConfig+0x2d8>
 8000936:	e6cb      	b.n	80006d0 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000938:	f7ff fc4a 	bl	80001d0 <HAL_GetTick>
 800093c:	1bc0      	subs	r0, r0, r7
 800093e:	2802      	cmp	r0, #2
 8000940:	d9d7      	bls.n	80008f2 <HAL_RCC_OscConfig+0x2a6>
 8000942:	e6c5      	b.n	80006d0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000944:	f7ff fc44 	bl	80001d0 <HAL_GetTick>
 8000948:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800094a:	6823      	ldr	r3, [r4, #0]
 800094c:	019b      	lsls	r3, r3, #6
 800094e:	f57f ae95 	bpl.w	800067c <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000952:	f7ff fc3d 	bl	80001d0 <HAL_GetTick>
 8000956:	1b40      	subs	r0, r0, r5
 8000958:	2802      	cmp	r0, #2
 800095a:	d9f6      	bls.n	800094a <HAL_RCC_OscConfig+0x2fe>
 800095c:	e6b8      	b.n	80006d0 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800095e:	2801      	cmp	r0, #1
 8000960:	f43f aeb7 	beq.w	80006d2 <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8000964:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000966:	6a2b      	ldr	r3, [r5, #32]
 8000968:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 800096c:	429a      	cmp	r2, r3
 800096e:	f47f ae71 	bne.w	8000654 <HAL_RCC_OscConfig+0x8>
 8000972:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000974:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8000978:	1ac0      	subs	r0, r0, r3
 800097a:	bf18      	it	ne
 800097c:	2001      	movne	r0, #1
 800097e:	e6a8      	b.n	80006d2 <HAL_RCC_OscConfig+0x86>
 8000980:	40021000 	.word	0x40021000
 8000984:	42420060 	.word	0x42420060

08000988 <HAL_RCC_GetSysClockFreq>:
{
 8000988:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800098a:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <HAL_RCC_GetSysClockFreq+0x68>)
{
 800098c:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800098e:	ac02      	add	r4, sp, #8
 8000990:	f103 0510 	add.w	r5, r3, #16
 8000994:	4622      	mov	r2, r4
 8000996:	6818      	ldr	r0, [r3, #0]
 8000998:	6859      	ldr	r1, [r3, #4]
 800099a:	3308      	adds	r3, #8
 800099c:	c203      	stmia	r2!, {r0, r1}
 800099e:	42ab      	cmp	r3, r5
 80009a0:	4614      	mov	r4, r2
 80009a2:	d1f7      	bne.n	8000994 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80009a4:	2301      	movs	r3, #1
 80009a6:	f88d 3004 	strb.w	r3, [sp, #4]
 80009aa:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80009ac:	4911      	ldr	r1, [pc, #68]	; (80009f4 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80009ae:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80009b2:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80009b4:	f003 020c 	and.w	r2, r3, #12
 80009b8:	2a08      	cmp	r2, #8
 80009ba:	d117      	bne.n	80009ec <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80009bc:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80009c0:	a806      	add	r0, sp, #24
 80009c2:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80009c4:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80009c6:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80009ca:	d50c      	bpl.n	80009e6 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80009cc:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80009ce:	480a      	ldr	r0, [pc, #40]	; (80009f8 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80009d0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80009d4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80009d6:	aa06      	add	r2, sp, #24
 80009d8:	4413      	add	r3, r2
 80009da:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80009de:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80009e2:	b007      	add	sp, #28
 80009e4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <HAL_RCC_GetSysClockFreq+0x74>)
 80009e8:	4350      	muls	r0, r2
 80009ea:	e7fa      	b.n	80009e2 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 80009ec:	4802      	ldr	r0, [pc, #8]	; (80009f8 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 80009ee:	e7f8      	b.n	80009e2 <HAL_RCC_GetSysClockFreq+0x5a>
 80009f0:	080013ac 	.word	0x080013ac
 80009f4:	40021000 	.word	0x40021000
 80009f8:	007a1200 	.word	0x007a1200
 80009fc:	003d0900 	.word	0x003d0900

08000a00 <HAL_RCC_ClockConfig>:
{
 8000a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a04:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8000a06:	4604      	mov	r4, r0
 8000a08:	b910      	cbnz	r0, 8000a10 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000a10:	4a45      	ldr	r2, [pc, #276]	; (8000b28 <HAL_RCC_ClockConfig+0x128>)
 8000a12:	6813      	ldr	r3, [r2, #0]
 8000a14:	f003 0307 	and.w	r3, r3, #7
 8000a18:	428b      	cmp	r3, r1
 8000a1a:	d329      	bcc.n	8000a70 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a1c:	6821      	ldr	r1, [r4, #0]
 8000a1e:	078e      	lsls	r6, r1, #30
 8000a20:	d431      	bmi.n	8000a86 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a22:	07ca      	lsls	r2, r1, #31
 8000a24:	d444      	bmi.n	8000ab0 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000a26:	4a40      	ldr	r2, [pc, #256]	; (8000b28 <HAL_RCC_ClockConfig+0x128>)
 8000a28:	6813      	ldr	r3, [r2, #0]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	429d      	cmp	r5, r3
 8000a30:	d367      	bcc.n	8000b02 <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a32:	6822      	ldr	r2, [r4, #0]
 8000a34:	4d3d      	ldr	r5, [pc, #244]	; (8000b2c <HAL_RCC_ClockConfig+0x12c>)
 8000a36:	f012 0f04 	tst.w	r2, #4
 8000a3a:	d16e      	bne.n	8000b1a <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a3c:	0713      	lsls	r3, r2, #28
 8000a3e:	d506      	bpl.n	8000a4e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000a40:	686b      	ldr	r3, [r5, #4]
 8000a42:	6922      	ldr	r2, [r4, #16]
 8000a44:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a48:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a4c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000a4e:	f7ff ff9b 	bl	8000988 <HAL_RCC_GetSysClockFreq>
 8000a52:	686b      	ldr	r3, [r5, #4]
 8000a54:	4a36      	ldr	r2, [pc, #216]	; (8000b30 <HAL_RCC_ClockConfig+0x130>)
 8000a56:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a5a:	5cd3      	ldrb	r3, [r2, r3]
 8000a5c:	40d8      	lsrs	r0, r3
 8000a5e:	4b35      	ldr	r3, [pc, #212]	; (8000b34 <HAL_RCC_ClockConfig+0x134>)
 8000a60:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8000a62:	4b35      	ldr	r3, [pc, #212]	; (8000b38 <HAL_RCC_ClockConfig+0x138>)
 8000a64:	6818      	ldr	r0, [r3, #0]
 8000a66:	f7ff fb71 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a70:	6813      	ldr	r3, [r2, #0]
 8000a72:	f023 0307 	bic.w	r3, r3, #7
 8000a76:	430b      	orrs	r3, r1
 8000a78:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a7a:	6813      	ldr	r3, [r2, #0]
 8000a7c:	f003 0307 	and.w	r3, r3, #7
 8000a80:	4299      	cmp	r1, r3
 8000a82:	d1c2      	bne.n	8000a0a <HAL_RCC_ClockConfig+0xa>
 8000a84:	e7ca      	b.n	8000a1c <HAL_RCC_ClockConfig+0x1c>
 8000a86:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a88:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000a8c:	bf1e      	ittt	ne
 8000a8e:	685a      	ldrne	r2, [r3, #4]
 8000a90:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000a94:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a96:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000a98:	bf42      	ittt	mi
 8000a9a:	685a      	ldrmi	r2, [r3, #4]
 8000a9c:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000aa0:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000aa2:	685a      	ldr	r2, [r3, #4]
 8000aa4:	68a0      	ldr	r0, [r4, #8]
 8000aa6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000aaa:	4302      	orrs	r2, r0
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	e7b8      	b.n	8000a22 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ab0:	6862      	ldr	r2, [r4, #4]
 8000ab2:	4e1e      	ldr	r6, [pc, #120]	; (8000b2c <HAL_RCC_ClockConfig+0x12c>)
 8000ab4:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ab6:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ab8:	d11b      	bne.n	8000af2 <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000abe:	d0a4      	beq.n	8000a0a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ac0:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ac2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ac6:	f023 0303 	bic.w	r3, r3, #3
 8000aca:	4313      	orrs	r3, r2
 8000acc:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000ace:	f7ff fb7f 	bl	80001d0 <HAL_GetTick>
 8000ad2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ad4:	6873      	ldr	r3, [r6, #4]
 8000ad6:	6862      	ldr	r2, [r4, #4]
 8000ad8:	f003 030c 	and.w	r3, r3, #12
 8000adc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000ae0:	d0a1      	beq.n	8000a26 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ae2:	f7ff fb75 	bl	80001d0 <HAL_GetTick>
 8000ae6:	1bc0      	subs	r0, r0, r7
 8000ae8:	4540      	cmp	r0, r8
 8000aea:	d9f3      	bls.n	8000ad4 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8000aec:	2003      	movs	r0, #3
}
 8000aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000af2:	2a02      	cmp	r2, #2
 8000af4:	d102      	bne.n	8000afc <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000af6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000afa:	e7e0      	b.n	8000abe <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000afc:	f013 0f02 	tst.w	r3, #2
 8000b00:	e7dd      	b.n	8000abe <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b02:	6813      	ldr	r3, [r2, #0]
 8000b04:	f023 0307 	bic.w	r3, r3, #7
 8000b08:	432b      	orrs	r3, r5
 8000b0a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b0c:	6813      	ldr	r3, [r2, #0]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	429d      	cmp	r5, r3
 8000b14:	f47f af79 	bne.w	8000a0a <HAL_RCC_ClockConfig+0xa>
 8000b18:	e78b      	b.n	8000a32 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b1a:	686b      	ldr	r3, [r5, #4]
 8000b1c:	68e1      	ldr	r1, [r4, #12]
 8000b1e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b22:	430b      	orrs	r3, r1
 8000b24:	606b      	str	r3, [r5, #4]
 8000b26:	e789      	b.n	8000a3c <HAL_RCC_ClockConfig+0x3c>
 8000b28:	40022000 	.word	0x40022000
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	080013bc 	.word	0x080013bc
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000004 	.word	0x20000004

08000b3c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000b3e:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000b46:	5cd3      	ldrb	r3, [r2, r3]
 8000b48:	4a03      	ldr	r2, [pc, #12]	; (8000b58 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000b4a:	6810      	ldr	r0, [r2, #0]
}
 8000b4c:	40d8      	lsrs	r0, r3
 8000b4e:	4770      	bx	lr
 8000b50:	40021000 	.word	0x40021000
 8000b54:	080013cc 	.word	0x080013cc
 8000b58:	20000008 	.word	0x20000008

08000b5c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000b5c:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000b66:	5cd3      	ldrb	r3, [r2, r3]
 8000b68:	4a03      	ldr	r2, [pc, #12]	; (8000b78 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000b6a:	6810      	ldr	r0, [r2, #0]
}
 8000b6c:	40d8      	lsrs	r0, r3
 8000b6e:	4770      	bx	lr
 8000b70:	40021000 	.word	0x40021000
 8000b74:	080013cc 	.word	0x080013cc
 8000b78:	20000008 	.word	0x20000008

08000b7c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000b7c:	6803      	ldr	r3, [r0, #0]
 8000b7e:	68da      	ldr	r2, [r3, #12]
 8000b80:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000b84:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000b86:	695a      	ldr	r2, [r3, #20]
 8000b88:	f022 0201 	bic.w	r2, r2, #1
 8000b8c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000b8e:	2320      	movs	r3, #32
 8000b90:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000b94:	4770      	bx	lr
	...

08000b98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000b98:	b538      	push	{r3, r4, r5, lr}
 8000b9a:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000b9c:	6803      	ldr	r3, [r0, #0]
 8000b9e:	68c1      	ldr	r1, [r0, #12]
 8000ba0:	691a      	ldr	r2, [r3, #16]
 8000ba2:	2419      	movs	r4, #25
 8000ba4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000bac:	6882      	ldr	r2, [r0, #8]
 8000bae:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000bb0:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000bb2:	4302      	orrs	r2, r0
 8000bb4:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8000bb6:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8000bba:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000bbe:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000bc4:	695a      	ldr	r2, [r3, #20]
 8000bc6:	69a9      	ldr	r1, [r5, #24]
 8000bc8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000bd0:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <UART_SetConfig+0x70>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d114      	bne.n	8000c00 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8000bd6:	f7ff ffc1 	bl	8000b5c <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000bda:	4360      	muls	r0, r4
 8000bdc:	686c      	ldr	r4, [r5, #4]
 8000bde:	2264      	movs	r2, #100	; 0x64
 8000be0:	00a4      	lsls	r4, r4, #2
 8000be2:	fbb0 f0f4 	udiv	r0, r0, r4
 8000be6:	fbb0 f4f2 	udiv	r4, r0, r2
 8000bea:	fb02 0314 	mls	r3, r2, r4, r0
 8000bee:	011b      	lsls	r3, r3, #4
 8000bf0:	3332      	adds	r3, #50	; 0x32
 8000bf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bf6:	6829      	ldr	r1, [r5, #0]
 8000bf8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8000bfc:	608b      	str	r3, [r1, #8]
 8000bfe:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8000c00:	f7ff ff9c 	bl	8000b3c <HAL_RCC_GetPCLK1Freq>
 8000c04:	e7e9      	b.n	8000bda <UART_SetConfig+0x42>
 8000c06:	bf00      	nop
 8000c08:	40013800 	.word	0x40013800

08000c0c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0e:	4604      	mov	r4, r0
 8000c10:	460e      	mov	r6, r1
 8000c12:	4617      	mov	r7, r2
 8000c14:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000c16:	6821      	ldr	r1, [r4, #0]
 8000c18:	680b      	ldr	r3, [r1, #0]
 8000c1a:	ea36 0303 	bics.w	r3, r6, r3
 8000c1e:	d101      	bne.n	8000c24 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000c20:	2000      	movs	r0, #0
}
 8000c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000c24:	1c6b      	adds	r3, r5, #1
 8000c26:	d0f7      	beq.n	8000c18 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000c28:	b995      	cbnz	r5, 8000c50 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000c2a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000c2c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000c34:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000c36:	695a      	ldr	r2, [r3, #20]
 8000c38:	f022 0201 	bic.w	r2, r2, #1
 8000c3c:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000c3e:	2320      	movs	r3, #32
 8000c40:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000c44:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000c50:	f7ff fabe 	bl	80001d0 <HAL_GetTick>
 8000c54:	1bc0      	subs	r0, r0, r7
 8000c56:	4285      	cmp	r5, r0
 8000c58:	d2dd      	bcs.n	8000c16 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000c5a:	e7e6      	b.n	8000c2a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000c5c <HAL_UART_Init>:
{
 8000c5c:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000c5e:	4604      	mov	r4, r0
 8000c60:	b340      	cbz	r0, 8000cb4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000c62:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000c66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c6a:	b91b      	cbnz	r3, 8000c74 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000c6c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000c70:	f000 fa62 	bl	8001138 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000c74:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000c76:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000c78:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000c7c:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000c7e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000c80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c84:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000c86:	f7ff ff87 	bl	8000b98 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c8a:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c8c:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c8e:	691a      	ldr	r2, [r3, #16]
 8000c90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000c94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000c96:	695a      	ldr	r2, [r3, #20]
 8000c98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000c9c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000c9e:	68da      	ldr	r2, [r3, #12]
 8000ca0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ca4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000ca6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ca8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8000caa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8000cae:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000cb2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000cb4:	2001      	movs	r0, #1
}
 8000cb6:	bd10      	pop	{r4, pc}

08000cb8 <HAL_UART_Transmit>:
{
 8000cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cbc:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8000cbe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000cc2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8000cc4:	2b20      	cmp	r3, #32
{
 8000cc6:	460d      	mov	r5, r1
 8000cc8:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8000cca:	d14e      	bne.n	8000d6a <HAL_UART_Transmit+0xb2>
    if ((pData == NULL) || (Size == 0U))
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	d049      	beq.n	8000d64 <HAL_UART_Transmit+0xac>
 8000cd0:	2a00      	cmp	r2, #0
 8000cd2:	d047      	beq.n	8000d64 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000cd4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d046      	beq.n	8000d6a <HAL_UART_Transmit+0xb2>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000ce6:	2321      	movs	r3, #33	; 0x21
 8000ce8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000cec:	f7ff fa70 	bl	80001d0 <HAL_GetTick>
 8000cf0:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000cf2:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000cf6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8000cfa:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	b96b      	cbnz	r3, 8000d1c <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	4632      	mov	r2, r6
 8000d04:	2140      	movs	r1, #64	; 0x40
 8000d06:	4620      	mov	r0, r4
 8000d08:	f7ff ff80 	bl	8000c0c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000d0c:	b9a8      	cbnz	r0, 8000d3a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000d0e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000d10:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000d14:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000d1c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d1e:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000d20:	3b01      	subs	r3, #1
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d26:	68a3      	ldr	r3, [r4, #8]
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d28:	2180      	movs	r1, #128	; 0x80
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d2e:	4620      	mov	r0, r4
 8000d30:	463b      	mov	r3, r7
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d32:	d10e      	bne.n	8000d52 <HAL_UART_Transmit+0x9a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d34:	f7ff ff6a 	bl	8000c0c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000d38:	b110      	cbz	r0, 8000d40 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000d3a:	2003      	movs	r0, #3
 8000d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000d40:	882b      	ldrh	r3, [r5, #0]
 8000d42:	6822      	ldr	r2, [r4, #0]
 8000d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d48:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8000d4a:	6923      	ldr	r3, [r4, #16]
 8000d4c:	b943      	cbnz	r3, 8000d60 <HAL_UART_Transmit+0xa8>
          pData += 2U;
 8000d4e:	3502      	adds	r5, #2
 8000d50:	e7d3      	b.n	8000cfa <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000d52:	f7ff ff5b 	bl	8000c0c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000d56:	2800      	cmp	r0, #0
 8000d58:	d1ef      	bne.n	8000d3a <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	782a      	ldrb	r2, [r5, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	3501      	adds	r5, #1
 8000d62:	e7ca      	b.n	8000cfa <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000d64:	2001      	movs	r0, #1
 8000d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000d6a:	2002      	movs	r0, #2
}
 8000d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000d70 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8000d70:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8000d74:	2b20      	cmp	r3, #32
 8000d76:	d120      	bne.n	8000dba <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8000d78:	b1e9      	cbz	r1, 8000db6 <HAL_UART_Receive_IT+0x46>
 8000d7a:	b1e2      	cbz	r2, 8000db6 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8000d7c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d01a      	beq.n	8000dba <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8000d84:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8000d86:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d88:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000d8a:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d8c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000d8e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8000d92:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8000d94:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8000d96:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8000d98:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8000d9c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000da0:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8000da2:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8000da4:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8000da6:	f041 0101 	orr.w	r1, r1, #1
 8000daa:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8000dac:	68d1      	ldr	r1, [r2, #12]
 8000dae:	f041 0120 	orr.w	r1, r1, #32
 8000db2:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8000db4:	4770      	bx	lr
      return HAL_ERROR;
 8000db6:	2001      	movs	r0, #1
 8000db8:	4770      	bx	lr
    return HAL_BUSY;
 8000dba:	2002      	movs	r0, #2
}
 8000dbc:	4770      	bx	lr

08000dbe <HAL_UART_TxCpltCallback>:
 8000dbe:	4770      	bx	lr

08000dc0 <HAL_UART_RxCpltCallback>:
 8000dc0:	4770      	bx	lr

08000dc2 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8000dc2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8000dc6:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8000dc8:	2b22      	cmp	r3, #34	; 0x22
 8000dca:	d136      	bne.n	8000e3a <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000dcc:	6883      	ldr	r3, [r0, #8]
 8000dce:	6901      	ldr	r1, [r0, #16]
 8000dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dd4:	6802      	ldr	r2, [r0, #0]
 8000dd6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000dd8:	d123      	bne.n	8000e22 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000dda:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8000ddc:	b9e9      	cbnz	r1, 8000e1a <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000dde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000de2:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8000de6:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8000de8:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8000dea:	3c01      	subs	r4, #1
 8000dec:	b2a4      	uxth	r4, r4
 8000dee:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8000df0:	b98c      	cbnz	r4, 8000e16 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000df2:	6803      	ldr	r3, [r0, #0]
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	f022 0220 	bic.w	r2, r2, #32
 8000dfa:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8000dfc:	68da      	ldr	r2, [r3, #12]
 8000dfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e02:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8000e04:	695a      	ldr	r2, [r3, #20]
 8000e06:	f022 0201 	bic.w	r2, r2, #1
 8000e0a:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8000e0c:	2320      	movs	r3, #32
 8000e0e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8000e12:	f7ff ffd5 	bl	8000dc0 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8000e16:	2000      	movs	r0, #0
}
 8000e18:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	f823 2b01 	strh.w	r2, [r3], #1
 8000e20:	e7e1      	b.n	8000de6 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 8000e22:	b921      	cbnz	r1, 8000e2e <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8000e24:	1c59      	adds	r1, r3, #1
 8000e26:	6852      	ldr	r2, [r2, #4]
 8000e28:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8000e2a:	701a      	strb	r2, [r3, #0]
 8000e2c:	e7dc      	b.n	8000de8 <UART_Receive_IT+0x26>
 8000e2e:	6852      	ldr	r2, [r2, #4]
 8000e30:	1c59      	adds	r1, r3, #1
 8000e32:	6281      	str	r1, [r0, #40]	; 0x28
 8000e34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000e38:	e7f7      	b.n	8000e2a <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	bd10      	pop	{r4, pc}

08000e3e <HAL_UART_ErrorCallback>:
 8000e3e:	4770      	bx	lr

08000e40 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000e40:	6803      	ldr	r3, [r0, #0]
{
 8000e42:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000e44:	681a      	ldr	r2, [r3, #0]
{
 8000e46:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8000e48:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000e4a:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8000e4c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8000e4e:	d107      	bne.n	8000e60 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000e50:	0696      	lsls	r6, r2, #26
 8000e52:	d55a      	bpl.n	8000f0a <HAL_UART_IRQHandler+0xca>
 8000e54:	068d      	lsls	r5, r1, #26
 8000e56:	d558      	bpl.n	8000f0a <HAL_UART_IRQHandler+0xca>
}
 8000e58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8000e5c:	f7ff bfb1 	b.w	8000dc2 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8000e60:	f015 0501 	ands.w	r5, r5, #1
 8000e64:	d102      	bne.n	8000e6c <HAL_UART_IRQHandler+0x2c>
 8000e66:	f411 7f90 	tst.w	r1, #288	; 0x120
 8000e6a:	d04e      	beq.n	8000f0a <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8000e6c:	07d3      	lsls	r3, r2, #31
 8000e6e:	d505      	bpl.n	8000e7c <HAL_UART_IRQHandler+0x3c>
 8000e70:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8000e72:	bf42      	ittt	mi
 8000e74:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8000e76:	f043 0301 	orrmi.w	r3, r3, #1
 8000e7a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e7c:	0750      	lsls	r0, r2, #29
 8000e7e:	d504      	bpl.n	8000e8a <HAL_UART_IRQHandler+0x4a>
 8000e80:	b11d      	cbz	r5, 8000e8a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8000e82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e8a:	0793      	lsls	r3, r2, #30
 8000e8c:	d504      	bpl.n	8000e98 <HAL_UART_IRQHandler+0x58>
 8000e8e:	b11d      	cbz	r5, 8000e98 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8000e90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e98:	0716      	lsls	r6, r2, #28
 8000e9a:	d504      	bpl.n	8000ea6 <HAL_UART_IRQHandler+0x66>
 8000e9c:	b11d      	cbz	r5, 8000ea6 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8000e9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8000ea6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d066      	beq.n	8000f7a <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000eac:	0695      	lsls	r5, r2, #26
 8000eae:	d504      	bpl.n	8000eba <HAL_UART_IRQHandler+0x7a>
 8000eb0:	0688      	lsls	r0, r1, #26
 8000eb2:	d502      	bpl.n	8000eba <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	f7ff ff84 	bl	8000dc2 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000eba:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8000ebc:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000ebe:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8000ec0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000ec2:	0711      	lsls	r1, r2, #28
 8000ec4:	d402      	bmi.n	8000ecc <HAL_UART_IRQHandler+0x8c>
 8000ec6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000eca:	d01a      	beq.n	8000f02 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8000ecc:	f7ff fe56 	bl	8000b7c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000ed0:	6823      	ldr	r3, [r4, #0]
 8000ed2:	695a      	ldr	r2, [r3, #20]
 8000ed4:	0652      	lsls	r2, r2, #25
 8000ed6:	d510      	bpl.n	8000efa <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000ed8:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8000eda:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ee0:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8000ee2:	b150      	cbz	r0, 8000efa <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8000ee4:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <HAL_UART_IRQHandler+0x13c>)
 8000ee6:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8000ee8:	f7ff f9e2 	bl	80002b0 <HAL_DMA_Abort_IT>
 8000eec:	2800      	cmp	r0, #0
 8000eee:	d044      	beq.n	8000f7a <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000ef0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8000ef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000ef6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000ef8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8000efa:	4620      	mov	r0, r4
 8000efc:	f7ff ff9f 	bl	8000e3e <HAL_UART_ErrorCallback>
 8000f00:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8000f02:	f7ff ff9c 	bl	8000e3e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f06:	63e5      	str	r5, [r4, #60]	; 0x3c
 8000f08:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000f0a:	0616      	lsls	r6, r2, #24
 8000f0c:	d527      	bpl.n	8000f5e <HAL_UART_IRQHandler+0x11e>
 8000f0e:	060d      	lsls	r5, r1, #24
 8000f10:	d525      	bpl.n	8000f5e <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8000f12:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8000f16:	2a21      	cmp	r2, #33	; 0x21
 8000f18:	d12f      	bne.n	8000f7a <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f1a:	68a2      	ldr	r2, [r4, #8]
 8000f1c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000f20:	6a22      	ldr	r2, [r4, #32]
 8000f22:	d117      	bne.n	8000f54 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8000f24:	8811      	ldrh	r1, [r2, #0]
 8000f26:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8000f2a:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8000f2c:	6921      	ldr	r1, [r4, #16]
 8000f2e:	b979      	cbnz	r1, 8000f50 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8000f30:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8000f32:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8000f34:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8000f36:	3a01      	subs	r2, #1
 8000f38:	b292      	uxth	r2, r2
 8000f3a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8000f3c:	b9ea      	cbnz	r2, 8000f7a <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000f3e:	68da      	ldr	r2, [r3, #12]
 8000f40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f44:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8000f46:	68da      	ldr	r2, [r3, #12]
 8000f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8000f50:	3201      	adds	r2, #1
 8000f52:	e7ee      	b.n	8000f32 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8000f54:	1c51      	adds	r1, r2, #1
 8000f56:	6221      	str	r1, [r4, #32]
 8000f58:	7812      	ldrb	r2, [r2, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	e7ea      	b.n	8000f34 <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8000f5e:	0650      	lsls	r0, r2, #25
 8000f60:	d50b      	bpl.n	8000f7a <HAL_UART_IRQHandler+0x13a>
 8000f62:	064a      	lsls	r2, r1, #25
 8000f64:	d509      	bpl.n	8000f7a <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8000f66:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8000f68:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8000f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f6e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000f70:	2320      	movs	r3, #32
 8000f72:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8000f76:	f7ff ff22 	bl	8000dbe <HAL_UART_TxCpltCallback>
 8000f7a:	bd70      	pop	{r4, r5, r6, pc}
 8000f7c:	08000f81 	.word	0x08000f81

08000f80 <UART_DMAAbortOnError>:
{
 8000f80:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8000f82:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f84:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8000f86:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8000f88:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8000f8a:	f7ff ff58 	bl	8000e3e <HAL_UART_ErrorCallback>
 8000f8e:	bd08      	pop	{r3, pc}

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b510      	push	{r4, lr}
 8000f92:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f94:	2228      	movs	r2, #40	; 0x28
 8000f96:	2100      	movs	r1, #0
 8000f98:	a806      	add	r0, sp, #24
 8000f9a:	f000 f9f3 	bl	8001384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2214      	movs	r2, #20
 8000fa2:	a801      	add	r0, sp, #4
 8000fa4:	f000 f9ee 	bl	8001384 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fac:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fae:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb0:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fb4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb8:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fba:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fbc:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fbe:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc0:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc2:	f7ff fb43 	bl	800064c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc6:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fcc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd0:	4621      	mov	r1, r4
 8000fd2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd4:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd6:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd8:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fda:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fdc:	f7ff fd10 	bl	8000a00 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000fe0:	b010      	add	sp, #64	; 0x40
 8000fe2:	bd10      	pop	{r4, pc}

08000fe4 <main>:
{
 8000fe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe6:	2400      	movs	r4, #0
  HAL_Init();
 8000fe8:	f7ff f8d4 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8000fec:	f7ff ffd0 	bl	8000f90 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff0:	4b20      	ldr	r3, [pc, #128]	; (8001074 <main+0x90>)
  hi2c1.Instance = I2C1;
 8000ff2:	4821      	ldr	r0, [pc, #132]	; (8001078 <main+0x94>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff4:	699a      	ldr	r2, [r3, #24]
  huart1.Instance = USART1;
 8000ff6:	4d21      	ldr	r5, [pc, #132]	; (800107c <main+0x98>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff8:	f042 0220 	orr.w	r2, r2, #32
 8000ffc:	619a      	str	r2, [r3, #24]
 8000ffe:	699a      	ldr	r2, [r3, #24]
 8001000:	f002 0220 	and.w	r2, r2, #32
 8001004:	9201      	str	r2, [sp, #4]
 8001006:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	699a      	ldr	r2, [r3, #24]
 800100a:	f042 0204 	orr.w	r2, r2, #4
 800100e:	619a      	str	r2, [r3, #24]
 8001010:	699a      	ldr	r2, [r3, #24]
 8001012:	f002 0204 	and.w	r2, r2, #4
 8001016:	9202      	str	r2, [sp, #8]
 8001018:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	699a      	ldr	r2, [r3, #24]
 800101c:	f042 0208 	orr.w	r2, r2, #8
 8001020:	619a      	str	r2, [r3, #24]
 8001022:	699b      	ldr	r3, [r3, #24]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001024:	4a16      	ldr	r2, [pc, #88]	; (8001080 <main+0x9c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	9303      	str	r3, [sp, #12]
 800102c:	9b03      	ldr	r3, [sp, #12]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <main+0xa0>)
  hi2c1.Init.OwnAddress1 = 0;
 8001030:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001032:	e880 001c 	stmia.w	r0, {r2, r3, r4}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001036:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800103a:	6144      	str	r4, [r0, #20]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800103c:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800103e:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001040:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001042:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001044:	f7ff fa5e 	bl	8000504 <HAL_I2C_Init>
  huart1.Init.BaudRate = 9600;
 8001048:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800104c:	490e      	ldr	r1, [pc, #56]	; (8001088 <main+0xa4>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800104e:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 9600;
 8001050:	e885 000a 	stmia.w	r5, {r1, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001054:	230c      	movs	r3, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001056:	60ac      	str	r4, [r5, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001058:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800105a:	612c      	str	r4, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800105c:	616b      	str	r3, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105e:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001062:	f7ff fdfb 	bl	8000c5c <HAL_UART_Init>
  HAL_UART_Receive_IT(&huart1, (uint8_t*)command, 1);
 8001066:	2201      	movs	r2, #1
 8001068:	4908      	ldr	r1, [pc, #32]	; (800108c <main+0xa8>)
 800106a:	4628      	mov	r0, r5
 800106c:	f7ff fe80 	bl	8000d70 <HAL_UART_Receive_IT>
 8001070:	e7fe      	b.n	8001070 <main+0x8c>
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	20000030 	.word	0x20000030
 800107c:	20000088 	.word	0x20000088
 8001080:	40005400 	.word	0x40005400
 8001084:	000186a0 	.word	0x000186a0
 8001088:	40013800 	.word	0x40013800
 800108c:	20000084 	.word	0x20000084

08001090 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001090:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <HAL_MspInit+0x3c>)
{
 8001092:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001094:	699a      	ldr	r2, [r3, #24]
 8001096:	f042 0201 	orr.w	r2, r2, #1
 800109a:	619a      	str	r2, [r3, #24]
 800109c:	699a      	ldr	r2, [r3, #24]
 800109e:	f002 0201 	and.w	r2, r2, #1
 80010a2:	9200      	str	r2, [sp, #0]
 80010a4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a6:	69da      	ldr	r2, [r3, #28]
 80010a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010ac:	61da      	str	r2, [r3, #28]
 80010ae:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010ba:	6853      	ldr	r3, [r2, #4]
 80010bc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	b002      	add	sp, #8
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010000 	.word	0x40010000

080010d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d4:	b510      	push	{r4, lr}
 80010d6:	4604      	mov	r4, r0
 80010d8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	2210      	movs	r2, #16
 80010dc:	2100      	movs	r1, #0
 80010de:	a802      	add	r0, sp, #8
 80010e0:	f000 f950 	bl	8001384 <memset>
  if(hi2c->Instance==I2C1)
 80010e4:	6822      	ldr	r2, [r4, #0]
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_I2C_MspInit+0x58>)
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d11c      	bne.n	8001126 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	4c10      	ldr	r4, [pc, #64]	; (8001130 <HAL_I2C_MspInit+0x5c>)
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ee:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f0:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f2:	4810      	ldr	r0, [pc, #64]	; (8001134 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	61a3      	str	r3, [r4, #24]
 80010fa:	69a3      	ldr	r3, [r4, #24]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001104:	23c0      	movs	r3, #192	; 0xc0
 8001106:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001108:	2312      	movs	r3, #18
 800110a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	f7ff f916 	bl	8000340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001114:	69e3      	ldr	r3, [r4, #28]
 8001116:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800111a:	61e3      	str	r3, [r4, #28]
 800111c:	69e3      	ldr	r3, [r4, #28]
 800111e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001126:	b006      	add	sp, #24
 8001128:	bd10      	pop	{r4, pc}
 800112a:	bf00      	nop
 800112c:	40005400 	.word	0x40005400
 8001130:	40021000 	.word	0x40021000
 8001134:	40010c00 	.word	0x40010c00

08001138 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001138:	b510      	push	{r4, lr}
 800113a:	4604      	mov	r4, r0
 800113c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	2210      	movs	r2, #16
 8001140:	2100      	movs	r1, #0
 8001142:	a802      	add	r0, sp, #8
 8001144:	f000 f91e 	bl	8001384 <memset>
  if(huart->Instance==USART1)
 8001148:	6822      	ldr	r2, [r4, #0]
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <HAL_UART_MspInit+0x80>)
 800114c:	429a      	cmp	r2, r3
 800114e:	d130      	bne.n	80011b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001150:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001154:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8001158:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800115c:	619a      	str	r2, [r3, #24]
 800115e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	4816      	ldr	r0, [pc, #88]	; (80011bc <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001162:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001166:	9200      	str	r2, [sp, #0]
 8001168:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116c:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	f042 0204 	orr.w	r2, r2, #4
 8001172:	619a      	str	r2, [r3, #24]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800117e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001182:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	f7ff f8d8 	bl	8000340 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001190:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001194:	a902      	add	r1, sp, #8
 8001196:	4809      	ldr	r0, [pc, #36]	; (80011bc <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001198:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f7ff f8cf 	bl	8000340 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011a2:	2025      	movs	r0, #37	; 0x25
 80011a4:	4622      	mov	r2, r4
 80011a6:	4621      	mov	r1, r4
 80011a8:	f7ff f82a 	bl	8000200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011ac:	2025      	movs	r0, #37	; 0x25
 80011ae:	f7ff f85b 	bl	8000268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011b2:	b006      	add	sp, #24
 80011b4:	bd10      	pop	{r4, pc}
 80011b6:	bf00      	nop
 80011b8:	40013800 	.word	0x40013800
 80011bc:	40010800 	.word	0x40010800

080011c0 <NMI_Handler>:
 80011c0:	4770      	bx	lr

080011c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c2:	e7fe      	b.n	80011c2 <HardFault_Handler>

080011c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c4:	e7fe      	b.n	80011c4 <MemManage_Handler>

080011c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c6:	e7fe      	b.n	80011c6 <BusFault_Handler>

080011c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler>

080011ca <SVC_Handler>:
 80011ca:	4770      	bx	lr

080011cc <DebugMon_Handler>:
 80011cc:	4770      	bx	lr

080011ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ce:	4770      	bx	lr

080011d0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d0:	f7fe bff2 	b.w	80001b8 <HAL_IncTick>

080011d4 <transmit>:
uint8_t command[1];
uint8_t package[8];

uint64_t buf;

void transmit(uint64_t data){
 80011d4:	2200      	movs	r2, #0
	for (uint8_t i = 0; i < 8; ++i){
		package[i] = (uint8_t) data;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <transmit+0x24>)
 80011d8:	54d0      	strb	r0, [r2, r3]
 80011da:	3201      	adds	r2, #1
		data >>= 8;
 80011dc:	0a00      	lsrs	r0, r0, #8
	for (uint8_t i = 0; i < 8; ++i){
 80011de:	2a08      	cmp	r2, #8
		data >>= 8;
 80011e0:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
 80011e4:	ea4f 2111 	mov.w	r1, r1, lsr #8
	for (uint8_t i = 0; i < 8; ++i){
 80011e8:	d1f6      	bne.n	80011d8 <transmit+0x4>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*) package, 8, 0xFFFF);
 80011ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ee:	4902      	ldr	r1, [pc, #8]	; (80011f8 <transmit+0x24>)
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <transmit+0x28>)
 80011f2:	f7ff bd61 	b.w	8000cb8 <HAL_UART_Transmit>
 80011f6:	bf00      	nop
 80011f8:	200000d0 	.word	0x200000d0
 80011fc:	20000088 	.word	0x20000088

08001200 <case0>:
}

void case0(){
	transmit(0);
 8001200:	2000      	movs	r0, #0
 8001202:	2100      	movs	r1, #0
 8001204:	f7ff bfe6 	b.w	80011d4 <transmit>

08001208 <case1>:
}

void case1(){
	transmit(1);
 8001208:	2001      	movs	r0, #1
 800120a:	2100      	movs	r1, #0
 800120c:	f7ff bfe2 	b.w	80011d4 <transmit>

08001210 <case2>:
}

void case2(){
	transmit(2);
 8001210:	2002      	movs	r0, #2
 8001212:	2100      	movs	r1, #0
 8001214:	f7ff bfde 	b.w	80011d4 <transmit>

08001218 <case3>:
}

void case3(){
	transmit(3);
 8001218:	2003      	movs	r0, #3
 800121a:	2100      	movs	r1, #0
 800121c:	f7ff bfda 	b.w	80011d4 <transmit>

08001220 <case4>:
}

void case4(){
	transmit(4);
 8001220:	2004      	movs	r0, #4
 8001222:	2100      	movs	r1, #0
 8001224:	f7ff bfd6 	b.w	80011d4 <transmit>

08001228 <case5>:
}

void case5(){
	transmit(5);
 8001228:	2005      	movs	r0, #5
 800122a:	2100      	movs	r1, #0
 800122c:	f7ff bfd2 	b.w	80011d4 <transmit>

08001230 <case6>:
}
void case6(){
	transmit(6);
 8001230:	2006      	movs	r0, #6
 8001232:	2100      	movs	r1, #0
 8001234:	f7ff bfce 	b.w	80011d4 <transmit>

08001238 <caseDefault>:
}

void caseDefault(){
	transmit(-1);
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f04f 31ff 	mov.w	r1, #4294967295
 8001240:	f7ff bfc8 	b.w	80011d4 <transmit>

08001244 <USART1_IRQHandler>:
/**
  * @brief This function handles USART1 global interrupt.
  */

void USART1_IRQHandler(void)
{
 8001244:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001246:	4815      	ldr	r0, [pc, #84]	; (800129c <USART1_IRQHandler+0x58>)
 8001248:	f7ff fdfa 	bl	8000e40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  switch(command[0]){
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <USART1_IRQHandler+0x5c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b06      	cmp	r3, #6
 8001252:	d820      	bhi.n	8001296 <USART1_IRQHandler+0x52>
 8001254:	e8df f003 	tbb	[pc, r3]
 8001258:	13100d04 	.word	0x13100d04
 800125c:	1916      	.short	0x1916
 800125e:	1c          	.byte	0x1c
 800125f:	00          	.byte	0x00
  	  case 0:
  		  case0();
 8001260:	f7ff ffce 	bl	8001200 <case0>
  		  caseDefault();
  }

  HAL_UART_Receive_IT(&huart1, (uint8_t*) command, 1);
  /* USER CODE END USART1_IRQn 1 */
}
 8001264:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_UART_Receive_IT(&huart1, (uint8_t*) command, 1);
 8001268:	2201      	movs	r2, #1
 800126a:	490d      	ldr	r1, [pc, #52]	; (80012a0 <USART1_IRQHandler+0x5c>)
 800126c:	480b      	ldr	r0, [pc, #44]	; (800129c <USART1_IRQHandler+0x58>)
 800126e:	f7ff bd7f 	b.w	8000d70 <HAL_UART_Receive_IT>
  		  case1();
 8001272:	f7ff ffc9 	bl	8001208 <case1>
  		  break;
 8001276:	e7f5      	b.n	8001264 <USART1_IRQHandler+0x20>
  		  case2();
 8001278:	f7ff ffca 	bl	8001210 <case2>
  		  break;
 800127c:	e7f2      	b.n	8001264 <USART1_IRQHandler+0x20>
  		  case3();
 800127e:	f7ff ffcb 	bl	8001218 <case3>
  		  break;
 8001282:	e7ef      	b.n	8001264 <USART1_IRQHandler+0x20>
  		  case4();
 8001284:	f7ff ffcc 	bl	8001220 <case4>
  		  break;
 8001288:	e7ec      	b.n	8001264 <USART1_IRQHandler+0x20>
  		  case5();
 800128a:	f7ff ffcd 	bl	8001228 <case5>
  		  break;
 800128e:	e7e9      	b.n	8001264 <USART1_IRQHandler+0x20>
  		  case6();
 8001290:	f7ff ffce 	bl	8001230 <case6>
  		  break;
 8001294:	e7e6      	b.n	8001264 <USART1_IRQHandler+0x20>
  		  caseDefault();
 8001296:	f7ff ffcf 	bl	8001238 <caseDefault>
 800129a:	e7e3      	b.n	8001264 <USART1_IRQHandler+0x20>
 800129c:	20000088 	.word	0x20000088
 80012a0:	20000084 	.word	0x20000084

080012a4 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <SystemInit+0x40>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	f042 0201 	orr.w	r2, r2, #1
 80012ac:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80012ae:	6859      	ldr	r1, [r3, #4]
 80012b0:	4a0d      	ldr	r2, [pc, #52]	; (80012e8 <SystemInit+0x44>)
 80012b2:	400a      	ands	r2, r1
 80012b4:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80012bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80012c0:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80012c8:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80012d0:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80012d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80012d6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80012d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <SystemInit+0x48>)
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	f8ff0000 	.word	0xf8ff0000
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012f2:	e003      	b.n	80012fc <LoopCopyDataInit>

080012f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012fa:	3104      	adds	r1, #4

080012fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012fc:	480a      	ldr	r0, [pc, #40]	; (8001328 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001300:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001302:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001304:	d3f6      	bcc.n	80012f4 <CopyDataInit>
  ldr r2, =_sbss
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001308:	e002      	b.n	8001310 <LoopFillZerobss>

0800130a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800130c:	f842 3b04 	str.w	r3, [r2], #4

08001310 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001312:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001314:	d3f9      	bcc.n	800130a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001316:	f7ff ffc5 	bl	80012a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131a:	f000 f80f 	bl	800133c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800131e:	f7ff fe61 	bl	8000fe4 <main>
  bx lr
 8001322:	4770      	bx	lr
  ldr r3, =_sidata
 8001324:	080013dc 	.word	0x080013dc
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800132c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001330:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001334:	200000d8 	.word	0x200000d8

08001338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001338:	e7fe      	b.n	8001338 <ADC1_2_IRQHandler>
	...

0800133c <__libc_init_array>:
 800133c:	b570      	push	{r4, r5, r6, lr}
 800133e:	2500      	movs	r5, #0
 8001340:	4e0c      	ldr	r6, [pc, #48]	; (8001374 <__libc_init_array+0x38>)
 8001342:	4c0d      	ldr	r4, [pc, #52]	; (8001378 <__libc_init_array+0x3c>)
 8001344:	1ba4      	subs	r4, r4, r6
 8001346:	10a4      	asrs	r4, r4, #2
 8001348:	42a5      	cmp	r5, r4
 800134a:	d109      	bne.n	8001360 <__libc_init_array+0x24>
 800134c:	f000 f822 	bl	8001394 <_init>
 8001350:	2500      	movs	r5, #0
 8001352:	4e0a      	ldr	r6, [pc, #40]	; (800137c <__libc_init_array+0x40>)
 8001354:	4c0a      	ldr	r4, [pc, #40]	; (8001380 <__libc_init_array+0x44>)
 8001356:	1ba4      	subs	r4, r4, r6
 8001358:	10a4      	asrs	r4, r4, #2
 800135a:	42a5      	cmp	r5, r4
 800135c:	d105      	bne.n	800136a <__libc_init_array+0x2e>
 800135e:	bd70      	pop	{r4, r5, r6, pc}
 8001360:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001364:	4798      	blx	r3
 8001366:	3501      	adds	r5, #1
 8001368:	e7ee      	b.n	8001348 <__libc_init_array+0xc>
 800136a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800136e:	4798      	blx	r3
 8001370:	3501      	adds	r5, #1
 8001372:	e7f2      	b.n	800135a <__libc_init_array+0x1e>
 8001374:	080013d4 	.word	0x080013d4
 8001378:	080013d4 	.word	0x080013d4
 800137c:	080013d4 	.word	0x080013d4
 8001380:	080013d8 	.word	0x080013d8

08001384 <memset>:
 8001384:	4603      	mov	r3, r0
 8001386:	4402      	add	r2, r0
 8001388:	4293      	cmp	r3, r2
 800138a:	d100      	bne.n	800138e <memset+0xa>
 800138c:	4770      	bx	lr
 800138e:	f803 1b01 	strb.w	r1, [r3], #1
 8001392:	e7f9      	b.n	8001388 <memset+0x4>

08001394 <_init>:
 8001394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001396:	bf00      	nop
 8001398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800139a:	bc08      	pop	{r3}
 800139c:	469e      	mov	lr, r3
 800139e:	4770      	bx	lr

080013a0 <_fini>:
 80013a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a2:	bf00      	nop
 80013a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013a6:	bc08      	pop	{r3}
 80013a8:	469e      	mov	lr, r3
 80013aa:	4770      	bx	lr
